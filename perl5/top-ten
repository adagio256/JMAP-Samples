#!perl
use v5.24.0;
use warnings;

use JSON::MaybeXS;
use LWP::UserAgent;
use MIME::Base64;

binmode *STDOUT, ':encoding(UTF-8)';

my $hostname   = $ENV{JMAP_HOSTNAME} // 'api.fastmail.com';
my $username   = $ENV{JMAP_USERNAME} // die "no JMAP_USERNAME set!\n";
my $token      = $ENV{JMAP_TOKEN}    // die "no JMAP_TOKEN set!\n";
my $auth_url   = "https://$hostname/.well-known/jmap";

my $www = LWP::UserAgent->new;
my $JSON = JSON::MaybeXS->new->utf8;

sub get_session {
  my $res = $www->get(
    $auth_url,
    Authorization  => "Bearer $token",
  );

  return $JSON->decode($res->decoded_content);
}

my $session = get_session();

my $account_id = $session->{primaryAccounts}->{"urn:ietf:params:jmap:mail"};
my $api_url = $session->{apiUrl};

sub do_request {
  my (@method_calls) = @_;

  my $res = $www->post(
    $api_url,
    'Content-Type' => 'application/json',
    Authorization  => "Bearer $token",
    Content => encode_json({
      using => [ "urn:ietf:params:jmap:core", "urn:ietf:params:jmap:mail" ],
      methodCalls => \@method_calls,
    }),
  );

  die $res->as_string unless $res->is_success;

  return $JSON->decode($res->decoded_content)->{methodResponses};
}

my $inbox_reply = do_request(
  [
    'Mailbox/query',
    {
      accountId => $account_id,
      filter    => { role => 'inbox', hasAnyRole => \1 },
    },
    'a',
  ]
);

my $inbox_id = $inbox_reply->[0][1]{ids}[0];

die "no inbox!?" unless defined $inbox_id;

my $mail_reply = do_request(
  [ 'Email/query',
    {
      accountId => $account_id,
      filter  => { inMailbox => $inbox_id },
      sort    =>  [ { property => "receivedAt", isAscending => \0 } ],
      limit   => 10,
    },
    'a',
  ],
  [ 'Email/get',
    { accountId => $account_id,
      properties => [ 'id', 'subject', 'receivedAt' ],
      '#ids' => { resultOf => 'a', name => 'Email/query', path => '/ids/*' },
    },
    'b',
  ]
);

for my $email ($mail_reply->[1][1]{list}->@*) {
  printf "%20s - %s\n", $email->{receivedAt}, $email->{subject};
}
